if (SKULD_WIN32)
	add_definitions(-DSKULD_SYSTEM_NAME=Windows)
elseif (SKULD_UNIX)
	add_definitions(-DSKULD_SYSTEM_NAME=Linux)
elseif (SKULD_MAC)
	add_definitions(-DSKULD_SYSTEM_NAME=OSX)
elseif (SKULD_ANDROID)
	add_definitions(-DSKULD_SYSTEM_NAME=Android)
endif()

if (RTC_ARCH_X64)
	add_definitions(-DSKULD_ARCH_NAME=AMD64)
elseif (RTC_ARCH_X86)
	add_definitions(-DSKULD_ARCH_NAME=X86)
elseif (RTC_ARCH_ARM64)
	add_definitions(-DSKULD_ARCH_NAME=ARM64)
elseif (RTC_ARCH_ARM)
	add_definitions(-DSKULD_ARCH_NAME=ARM)
endif()

add_subdirectory(module)

get_property(SKULD_SRC GLOBAL PROPERTY "_SKULD_SRC")
get_property(SKULD_MODULE GLOBAL PROPERTY "_SKULD_MODULE")

add_library(Core SHARED ${SKULD_SRC})

if (SKULD_WIN32)
    target_link_libraries(Core winmm ws2_32 version mswsock)
elseif (SKULD_UNIX)
    target_link_libraries(Core pthread dl m)
elseif (SKULD_MAC)
    target_link_libraries(Core "-framework CoreFoundation" "-framework Foundation" "-framework System")
elseif (SKULD_ANDROID)
    target_link_libraries(Core log android)
endif()
target_compile_definitions(Core PRIVATE SKULD_BUILD_DYNAMIC)
if (SKULD_ENABLE_MSIL)
	target_compile_definitions(Core PRIVATE SKULD_ENABLE_MSIL)
endif()
if (SKULD_ENABLE_LUA)
	target_compile_definitions(Core PRIVATE SKULD_ENABLE_LUA)
endif()
if (SKULD_ENABLE_JAVASCRIPT)
	target_compile_definitions(Core PRIVATE SKULD_ENABLE_JAVASCRIPT)
endif()
if (SKULD_ENABLE_PYTHON)
	target_compile_definitions(Core PRIVATE SKULD_ENABLE_PYTHON)
endif()
if (SKULD_ANDROID OR SKULD_UNIX)
	set_target_properties(Core PROPERTIES LINK_FLAGS "-Wl,--version-script=\"${SKULD_VERSION_SCRIPT_DIR}/export.map\"")
endif()
target_include_directories(Core PRIVATE ${SKULD_INCLUDE_DIR} ${SKULD_INTERNAL_INCLUDE_DIR})
target_include_directories(Core PRIVATE ${SKULD_SDK_DIR})

add_subdirectory(plugins)

if (SKULD_BUILD_EXTRA)
    add_subdirectory(extra)
endif()

if (SKULD_BUILD_TESTS)
    add_subdirectory(tests)
endif()

if (SKULD_BUILD_TOOLS)
    add_subdirectory(tools)
endif()

detect_link_map()

get_property(SKULD_THIRD_PARTY GLOBAL PROPERTY "_SKULD_THIRD_PARTY_SHOULD_LINK")
add_merged_library(CoreStatic)
add_dependencies(CoreStatic ${SKULD_MODULE} ${SKULD_THIRD_PARTY})

if (SKULD_MULTICONFIG)
	foreach(build_type ${CMAKE_CONFIGURATION_TYPES}) 
		string(TOUPPER ${build_type} up_build_type)
		set_target_properties(CoreStatic PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_${up_build_type} ${CMAKE_BINARY_DIR}/${build_type}/lib)
		set_target_properties(CoreStatic PROPERTIES LIBRARY_OUTPUT_DIRECTORY_${up_build_type} ${CMAKE_BINARY_DIR}/${build_type}/bin)
		set_target_properties(Core PROPERTIES RUNTIME_OUTPUT_DIRECTORY_${up_build_type} ${CMAKE_BINARY_DIR}/${build_type}/bin)
		set_target_properties(Core PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_${up_build_type} ${CMAKE_BINARY_DIR}/${build_type}/lib)
		set_target_properties(Core PROPERTIES LIBRARY_OUTPUT_DIRECTORY_${up_build_type} ${CMAKE_BINARY_DIR}/${build_type}/bin)
	endforeach()
else()
	set_target_properties(CoreStatic PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
	set_target_properties(CoreStatic PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/bin)
	set_target_properties(Core PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/bin)
	set_target_properties(Core PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)
	set_target_properties(Core PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/bin)
endif()
if (SKULD_WIN32)
    target_link_libraries(CoreStatic winmm ws2_32 version mswsock)
elseif (SKULD_UNIX)
    target_link_libraries(CoreStatic pthread dl m)
elseif (SKULD_MAC)
    target_link_libraries(CoreStatic "-framework CoreFoundation" "-framework Foundation" "-framework System")
elseif (SKULD_ANDROID)
    target_link_libraries(CoreStatic log android)
endif()
merge_static_libs(CoreStatic ${SKULD_MODULE} ${SKULD_THIRD_PARTY})
strip(Core)