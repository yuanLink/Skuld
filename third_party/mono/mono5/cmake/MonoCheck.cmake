include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckSymbolExists)
include(CheckTypeSize)

if (MONO_WIN32)
    set(HAVE_VISIBILITY_HIDDEN off)
    set(NAME_DEV_RANDOM "")
    set(MONO_ZERO_LEN_ARRAY 1)
    set(HAVE_DECL___READFSDWORD on)
    set(HAVE_SIOCGIFCONF off)
    set(PLATFORM_NO_SYMLINKS on)
    set(USE_GCC_ATOMIC_OPS off)
    set(DISABLE_PORTABILITY on)
else()
    set(HAVE_VISIBILITY_HIDDEN on)
    set(MONO_ZERO_LEN_ARRAY 0)
    set(HAVE_DECL___READFSDWORD off)
    set(NAME_DEV_RANDOM "/dev/random")
    set(HAVE_SIOCGIFCONF on)
    set(PLATFORM_NO_SYMLINKS on)
    set(USE_GCC_ATOMIC_OPS on)
    set(DISABLE_PORTABILITY off)
endif()

if (MONO_ARM64)
    set(MONO_ARCHITECTURE "arm64")
elseif(MONO_ARM)
    set(MONO_ARCHITECTURE "arm")
elseif(MONO_AMD64)
    set(MONO_ARCHITECTURE "amd64")
elseif(MONO_X86)
    set(MONO_ARCHITECTURE "x86")
endif()
 
if (MONO_CROSS_COMPILE)
    set(DISABLE_LOGGING on)
    set(DISABLE_PROFILER on)
    set(DISABLE_REFLECTION_EMIT on)
    set(DISABLE_REFLECTION_EMIT_SAVE on)
    set(MONO_DISABLE_FEATURE "profiler,logging,full_messages,reflection_emit,reflection_emit_save")
else()
    set(DISABLE_LOGGING off)
    set(DISABLE_PROFILER off)
    set(DISABLE_REFLECTION_EMIT off)
    set(DISABLE_REFLECTION_EMIT_SAVE off)
    set(MONO_DISABLE_FEATURE "none")
endif()

if (MONO_ANDROID)
    set(PLATFORM_ANDROID on)
endif()

set(DISABLE_JIT off)

check_include_files("stdlib.h;stdarg.h;string.h;float.h" STDC_HEADERS)
check_type_size(size_t SIZEOF_SIZE_T)
check_type_size("void*" SIZEOF_VOID_P)
check_include_file(pthread.h HAVE_PTHREAD_H)
check_symbol_exists(pthread_kill "pthread.h" HAVE_PTHREAD_KILL)
check_symbol_exists(pthread_mutex_timedlock "pthread.h" HAVE_PTHREAD_MUTEX_TIMEDLOCK)
check_include_file(pthread_np.h HAVE_PTHREAD_NP_H)
check_symbol_exists(pthread_setname_np "pthread_np.h" HAVE_PTHREAD_SETNAME_NP)
check_symbol_exists(pthread_attr_getstack "pthread.h" HAVE_PTHREAD_ATTR_GETSTACK)
check_symbol_exists(pthread_attr_getstacksize "pthread.h" HAVE_PTHREAD_ATTR_GETSTACKSIZE)
check_symbol_exists(pthread_attr_get_np "pthread_np.h" HAVE_PTHREAD_ATTR_GET_NP)
check_symbol_exists(pthread_attr_setstacksize "pthread.h" HAVE_PTHREAD_ATTR_SETSTACKSIZE)
check_symbol_exists(pthread_getattr_np "pthread_np.h" HAVE_PTHREAD_GETATTR_NP)
check_symbol_exists(pthread_get_stackaddr_np "pthread_np.h" HAVE_PTHREAD_GET_STACKADDR_NP)
check_symbol_exists(pthread_get_stacksize_np "pthread_np.h" HAVE_PTHREAD_GET_STACKSIZE_NP)

check_include_file("sys/auxv.h" HAVE_SYS_AUXV_H)
check_include_file("sys/epoll.h" HAVE_SYS_EPOLL_H)
check_include_file("sys/event.h" HAVE_SYS_EVENT_H)
check_include_file("sys/extattr.h" HAVE_SYS_EXTATTR_H)
check_include_file("sys/filio.h" HAVE_SYS_FILIO_H)
check_include_file("sys/inotify.h" HAVE_SYS_INOTIFY_H)
check_include_file("sys/ioctl.h" HAVE_SYS_IOCTL_H)
check_include_file("sys/ipc.h" HAVE_SYS_IPC_H)
check_include_file("sys/mkdev.h" HAVE_SYS_MKDEV_H)
check_include_file("sys/mman.h" HAVE_SYS_MMAN_H)
check_include_file("sys/mount.h" HAVE_SYS_MOUNT_H)
check_include_file("sys/param.h" HAVE_SYS_PARAM_H)
check_include_file("sys/poll.h" HAVE_SYS_POLL_H)
check_include_file("sys/prctl.h" HAVE_SYS_PRCTL_H)
check_include_file("sys/resource.h" HAVE_SYS_RESOURCE_H)
check_include_file("sys/sdt.h" HAVE_SYS_SDT_H)
check_include_file("sys/select.h" HAVE_SYS_SELECT_H)
check_include_file("sys/sendfile.h" HAVE_SYS_SENDFILE_H)
check_include_file("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_file("sys/sockio.h" HAVE_SYS_SOCKIO_H)
check_include_file("sys/statfs.h" HAVE_SYS_STATFS_H)
check_include_file("sys/statvfs.h" HAVE_SYS_STATVFS_H)
check_include_file("sys/stat.h" HAVE_SYS_STAT_H)
check_include_file("sys/syscall.h" HAVE_SYS_SYSCALL_H)
check_include_file("sys/sysctl.h" HAVE_SYS_SYSCTL_H)
check_include_file("sys/time.h" HAVE_SYS_TIME_H)
check_include_file("sys/types.h" HAVE_SYS_TYPES_H)
check_include_file("sys/uio.h" HAVE_SYS_UIO_H)
check_include_file("sys/un.h" HAVE_SYS_UN_H)
check_include_file("sys/user.h" HAVE_SYS_USER_H)
check_include_file("sys/utime.h" HAVE_SYS_UTIME_H)
check_include_file("sys/utsname.h" HAVE_SYS_UTSNAME_H)
check_include_file("sys/vfstab.h" HAVE_SYS_VFSTAB_H)
check_include_file("sys/wait.h" HAVE_SYS_WAIT_H)
check_include_file("sys/xattr.h" HAVE_SYS_XATTR_H)
check_include_file(ucontext.h HAVE_UCONTEXT_H)
check_include_file(unistd.h HAVE_UNISTD_H)
check_include_file(unwind.h HAVE_UNWIND_H)
check_include_file("malloc.h" HAVE_USR_INCLUDE_MALLOC_H)
check_include_file(utime.h HAVE_UTIME_H)
check_include_file(wchar.h HAVE_WCHAR_H)
check_include_file(alloca.h HAVE_ALLOCA_H)
check_include_file(syslog.h HAVE_SYSLOG_H)
check_type_size(suseconds_t HAVE_SUSECONDS_T)
check_include_file(stdint.h HAVE_STDINT_H)
check_include_file(stdlib.h HAVE_STDLIB_H)
check_include_file(strings.h HAVE_STRINGS_H)
check_include_file(string.h HAVE_STRING_H)
check_include_file(semaphore.h HAVE_SEMAPHORE_H)
check_include_file(pwd.h HAVE_PWD_H)
check_include_file(poll.h HAVE_POLL_H)
check_include_file(dirent.h HAVE_DIRENT_H)
check_include_file("arpa/inet.h" HAVE_ARPA_INET_H)
check_include_file("asm/sigcontext.h" HAVE_ASM_SIGCONTEXT_H)
check_include_file("attr/xattr.h" HAVE_ATTR_XATTR_H)
check_include_file(checklist.h HAVE_CHECKLIST_H)
check_include_file(elf.h HAVE_ELF_H)
check_type_size(blkcnt_t HAVE_BLKCNT_T)
check_type_size(blksize_t HAVE_BLKSIZE_T)
check_include_file("nacl/nacl_dyncode.h" HAVE_NACL_NACL_DYNCODE_H)
check_include_file(netdb.h HAVE_NETDB_H)
check_include_file("netinet/in.h" HAVE_NETINET_IN_H)
check_include_file("netinet/tcp.h" HAVE_NETINET_TCP_H)
check_include_file("net/if.h" HAVE_NET_IF_H)
check_include_file(link.h HAVE_LINK_H)
check_include_file("linux/magic.h" HAVE_LINUX_MAGIC_H)
check_include_file("linux/netlink.h" HAVE_LINUX_NETLINK_H)
check_include_file("linux/rtc.h" HAVE_LINUX_RTC_H)
check_include_file("linux/rtnetlink.h" HAVE_LINUX_RTNETLINK_H)
check_include_file("linux/serial.h" HAVE_LINUX_SERIAL_H)
check_include_file(memory.h HAVE_MEMORY_H)
check_include_file(dlfcn.h HAVE_DLFCN_H)
check_include_file(execinfo.h HAVE_EXECINFO_H)
check_include_file(fstab.h HAVE_FSTAB_H)
check_include_file("CommonCrypto/CommonDigest.h" HAVE_COMMONCRYPTO_COMMONDIGEST_H)
check_include_file(complex.h HAVE_COMPLEX_H)
check_include_file(curses.h HAVE_CURSES_H)
check_include_file(grp.h HAVE_GRP_H)
check_include_file(ieeefp.h HAVE_IEEEFP_H)
check_include_file(inttypes.h HAVE_INTTYPES_H)
check_include_file(libproc.h HAVE_LIBPROC_H)
check_include_file(termios.h HAVE_TERMIOS_H)
check_include_file(term.h HAVE_TERM_H)
check_include_file(winternl.h HAVE_WINTERNL_H)
check_include_file(pathconf.h HAVE_PATHCONF_H)

check_symbol_exists(InterlockedAdd "Windows.h" HAVE_DECL_INTERLOCKEDADD)
check_symbol_exists(InterlockedAdd64 "Windows.h" HAVE_DECL_INTERLOCKEDADD64)
check_symbol_exists(InterlockedCompareExchange64 "Windows.h" HAVE_DECL_INTERLOCKEDCOMPAREEXCHANGE64)
check_symbol_exists(InterlockedDecrement64 "Windows.h" HAVE_DECL_INTERLOCKEDDECREMENT64)
check_symbol_exists(InterlockedExchange64 "Windows.h" HAVE_DECL_INTERLOCKEDEXCHANGE64)
check_symbol_exists(InterlockedIncrement64 "Windows.h" HAVE_DECL_INTERLOCKEDINCREMENT64)
check_symbol_exists(CPU_COUNT "sched.h" GLIBC_HAS_CPU_COUNT)

if (MONO_OSX)
    set(HAVE_STRUCT_KINFO_PROC_KP_PROC 1)
    set(USE_MACH_SEMA 1)
endif()

if (MONO_ARM)
    set(HAVE_ARMV5 on)
    set(HAVE_ARMV6 on)
    set(HAVE_ARMV7 on)
endif()

macro(find_symbol SYMBOL HEADERS CHECK_PARA VARIABLE)
    if (NOT DEFINED ${VARIABLE})
        set(TEMP ${CMAKE_TRY_COMPILE_TARGET_TYPE})
        set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
        message("-- Looking for ${SYMBOL}")
        set(SOURCE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/FindSymbol_${SYMBOL}.cpp")
        file(REMOVE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/FindSymbol_${SYMBOL}.log")
        set(HEADER_LINES )
        foreach(HEADER ${HEADERS})
            list(APPEND HEADER_LINES "#include <${HEADER}>")
        endforeach()
        foreach(HEADER_LINE ${HEADER_LINES})
            file(WRITE ${SOURCE} "${HEADER_LINE}\nint test(){${SYMBOL}(${CHECK_PARA});return 0;}")
            try_compile(${VARIABLE} 
                "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/"
                "${SOURCE}"
                COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
                ${CHECK_SYMBOL_EXISTS_LIBS}
                CMAKE_FLAGS
                -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_SYMBOL_EXISTS_FLAGS}
                "${CMAKE_SYMBOL_EXISTS_INCLUDES}"
                OUTPUT_VARIABLE OUTPUT)
            file(APPEND "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/FindSymbol_${SYMBOL}.log"
                ${OUTPUT})
            if (${VARIABLE})
                break()
            endif()
        endforeach()
        if (${VARIABLE})
            message("-- Found ${SYMBOL}")
            set(${VARIABLE} on CACHE INTERNAL "${SYMBOL}")
        else()
            message("-- Cannot find ${SYMBOL}")
            set(${VARIABLE} off CACHE INTERNAL "${SYMBOL}")
        endif()
        set(CMAKE_TRY_COMPILE_TARGET_TYPE ${TEMP})
    endif()
endmacro()

if (NOT DEFINED GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY)

    file(WRITE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY.cpp" "
#include <sched.h>
int main ()
{

            int mask = 1;
            sched_setaffinity(0, &mask);
			return 0;

  ;
  return 0;
}")
    try_compile(GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY
        "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/"
        "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY.cpp"
        COMPILE_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS}
        ${CHECK_SYMBOL_EXISTS_LIBS}
        CMAKE_FLAGS
        -DCOMPILE_DEFINITIONS:STRING=${MACRO_CHECK_SYMBOL_EXISTS_FLAGS}
        "${CMAKE_SYMBOL_EXISTS_INCLUDES}"
        OUTPUT_VARIABLE OUTPUT)
    file(WRITE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY.log" ${OUTPUT})
    if (${VARIABLE})
        message("-- GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY -- on")
        set(${VARIABLE} on CACHE INTERNAL "GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY")
    else()
        message("-- GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY -- off")
        set(${VARIABLE} off CACHE INTERNAL "GLIBC_BEFORE_2_3_4_SCHED_SETAFFINITY")
    endif()
endif()

find_symbol(getaddrinfo "netdb.h;WS2tcpip.h" "0, 0, 0, 0" HAVE_GETADDRINFO)
find_symbol(getprotobyname "netdb.h;WS2tcpip.h" "0" HAVE_GETPROTOBYNAME)
find_symbol(getifaddrs "ifaddrs.h" "0" HAVE_GETIFADDRS)
find_symbol(getnameinfo "netdb.h;WS2tcpip.h" "0, 0, 0, 0, 0, 0, 0" HAVE_GETNAMEINFO)
find_symbol(gethostbyname "netdb.h" "0, 0, 0, 0, 0, 0, 0" HAVE_GETHOSTBYNAME)
find_symbol(gethostbyname2 "netdb.h" "0, 0, 0, 0, 0, 0, 0" HAVE_GETHOSTBYNAME2)
find_symbol(gethostbyname2_r "netdb.h" "0, 0, 0, 0, 0, 0, 0" HAVE_GETHOSTBYNAME2_R)
find_symbol(inet_ntop "netdb.h;WS2tcpip.h" "0, 0, 0, 0" HAVE_INET_NTOP)
find_symbol(inet_pton "netdb.h;WS2tcpip.h" "0, 0, 0" HAVE_INET_PTON)


check_type_size(tm_gmtoff HAVE_TM_GMTOFF)
check_function_exists(statfs HAVE_STATFS)
check_function_exists(statvfs HAVE_STATVFS)
check_function_exists(system HAVE_SYSTEM)
check_function_exists(swab HAVE_SWAB)
check_function_exists(sysconf HAVE_SYSCONF)
check_function_exists(utimensat HAVE_UTIMENSAT)
check_function_exists(trunc HAVE_TRUNC)
check_function_exists(ttyname_r HAVE_TTYNAME_R)
check_function_exists(vsnprintf HAVE_VSNPRINTF)
check_function_exists(stime HAVE_STIME)
check_function_exists(strerror_r HAVE_STRERROR_R)
check_function_exists(poll HAVE_POLL)
check_function_exists(posix_fadvise HAVE_POSIX_FADVISE)
check_function_exists(posix_fallocate HAVE_POSIX_FALLOCATE)
check_function_exists(posix_madvise HAVE_POSIX_MADVISE)
check_function_exists(prctl HAVE_PRCTL)
check_function_exists(preadv HAVE_PREADV)
check_function_exists(psignal HAVE_PSIGNAL)
check_function_exists(pwritev HAVE_PWRITEV)
check_function_exists(readlinkat HAVE_READLINKAT)
check_function_exists(readv HAVE_READV)
check_function_exists(remap_file_pages HAVE_REMAP_FILE_PAGES)
check_function_exists(sched_getaffinity HAVE_SCHED_GETAFFINITY)
check_function_exists(sched_getcpu HAVE_SCHED_GETCPU)
check_function_exists(sched_setaffinity HAVE_SCHED_SETAFFINITY)
check_function_exists(seekdir HAVE_SEEKDIR)
check_function_exists(sendfile HAVE_SENDFILE)
check_function_exists(setdomainname HAVE_SETDOMAINNAME)
check_function_exists(setgrent HAVE_SETGRENT)
check_function_exists(setgroups HAVE_SETGROUPS)
check_function_exists(sethostid HAVE_SETHOSTID)
check_function_exists(sethostname HAVE_SETHOSTNAME)
check_function_exists(setpgid HAVE_SETPGID)
check_function_exists(setpriority HAVE_SETPRIORITY)
check_function_exists(setpwent HAVE_SETPWENT)
check_function_exists(setresuid HAVE_SETRESUID)
check_function_exists(setusershell HAVE_SETUSERSHELL)
check_function_exists(shm_open HAVE_SHM_OPEN)
check_function_exists(sigaction HAVE_SIGACTION)
check_function_exists(signal HAVE_SIGNAL)
check_function_exists(backtrace_symbols HAVE_BACKTRACE_SYMBOLS)
check_function_exists(lockf HAVE_LOCKF)
check_function_exists(lutimes HAVE_LUTIMES)
check_function_exists(madvise HAVE_MADVISE)
check_function_exists(dladdr HAVE_DLADDR)
check_function_exists(dl_iterate_phdr HAVE_DL_ITERATE_PHDR)
check_function_exists(endgrent HAVE_ENDGRENT)
check_function_exists(endpwent HAVE_ENDPWENT)
check_function_exists(endusershell HAVE_ENDUSERSHELL)
check_function_exists(epoll_ctl HAVE_EPOLL_CTL)
check_function_exists(execv HAVE_EXECV)
check_function_exists(execve HAVE_EXECVE)
check_function_exists(execvp HAVE_EXECVP)
check_function_exists(fgetgrent HAVE_FGETGRENT)
check_function_exists(fgetpwent HAVE_FGETPWENT)
check_function_exists(finite HAVE_FINITE)
check_function_exists(fork HAVE_FORK)
check_function_exists(fstatat HAVE_FSTATAT)
check_function_exists(fstatfs HAVE_FSTATFS)
check_function_exists(fstatvfs HAVE_FSTATVFS)
check_function_exists(futimens HAVE_FUTIMENS)
check_function_exists(futimes HAVE_FUTIMES)
check_function_exists(clock_nanosleep HAVE_CLOCK_NANOSLEEP)
check_function_exists(confstr HAVE_CONFSTR)
check_function_exists(getdomainname HAVE_GETDOMAINNAME)
check_function_exists(getfsstat HAVE_GETFSSTAT)
check_function_exists(getgrent HAVE_GETGRENT)
check_function_exists(getgrgid_r HAVE_GETGRGID_R)
check_function_exists(getgrnam_r HAVE_GETGRNAM_R)
check_function_exists(gethostid HAVE_GETHOSTID)
check_function_exists(getlogin_r HAVE_GETLOGIN_R)
check_function_exists(getpriority HAVE_GETPRIORITY)
check_function_exists(getpwent HAVE_GETPWENT)
check_function_exists(getpwnam_r HAVE_GETPWNAM_R)
check_function_exists(getpwuid_r HAVE_GETPWUID_R)
check_function_exists(getresuid HAVE_GETRESUID)
check_function_exists(getrlimit HAVE_GETRLIMIT)
check_function_exists(getrusage HAVE_GETRUSAGE)
check_function_exists(inet_aton HAVE_INET_ATON)
check_function_exists(isfinite HAVE_ISFINITE)
check_symbol_exists(isinf "math.h" HAVE_ISINF)
check_function_exists(kill HAVE_KILL)
check_function_exists(kqueue HAVE_KQUEUE)
check_function_exists(mknodat HAVE_MKNODAT)
check_function_exists(mkstemp HAVE_MKSTEMP)
check_function_exists(mmap HAVE_MMAP)
check_function_exists(mremap HAVE_MREMAP)
set(HAVE_EPOLL ${HAVE_SYS_EPOLL_H})