cmake_minimum_required(VERSION 3.7)

if(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

function(append_mono_src target src)
    get_property(MONO_SRC GLOBAL PROPERTY MONO_${target}_SRC)
    list(APPEND MONO_SRC ${src})
    set_property(GLOBAL PROPERTY MONO_${target}_SRC ${MONO_SRC})
endfunction()

if (NOT MONO_EMBED)
    set(MONO_ARM64 off)
    set(MONO_ARM on)
    set(MONO_AMD64 off)
    set(MONO_X86 off)
    set(MONO_POWERPC off)
    set(MONO_POWERPC64 off)

    set(MONO_WIN32 off)
    set(MONO_UNIX off)
    set(MONO_OSX off)
    set(MONO_ANDROID on)

    set(MONO_TARGET_ARCH ARM)
    set(MONO_TARGET_PLATFORM ANDROID)

    if(MONO_WIN32)
        enable_language(ASM_MASM)
    elseif (MONO_UNIX)
	    if (MONO_AMD64)
		    set(CMAKE_SIZEOF_VOID_P 8)
		    set(CMAKE_CXX_FLAGS "-m64 ${CMAKE_CXX_FLAGS}")
		    set(CMAKE_C_FLAGS "-m64 ${CMAKE_C_FLAGS}")
	    elseif(MONO_X86)
	    	set(CMAKE_SYSTEM_PROCESSOR i386)
	    	set(CMAKE_SYSTEM_LIBRARY_PATH /lib32 /usr/lib32 /usr/local/lib32 /usr/lib/i386-linux-gnu)
	    	set(FIND_LIBRARY_USE_LIB64_PATHS OFF)
	    	set(CMAKE_IGNORE_PATH /lib /usr/lib /usr/local/lib /usr/lib/x86_64-linux-gnu)

	    	set(CMAKE_SIZEOF_VOID_P 4)
	    	set(CMAKE_CXX_FLAGS "-m32 ${CMAKE_CXX_FLAGS}")
	    	set(CMAKE_C_FLAGS "-m32 ${CMAKE_C_FLAGS}")
	    endif()
    endif()
endif()

if (MONO_WIN32)
    add_definitions(-DWIN32_LEAN_AND_MEAN -DWIN32_THREADS -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -D_UNICODE -DUNICODE)
    set(CMAKE_CXX_FLAGS_RELEASE -O1 -Ob1)
    set(CMAKE_C_FLAGS_RELEASE -O1 -Ob1)
    add_definitions(-D__WIN32__)
    set(HOST_WIN32 on)
elseif (MONO_UNIX)
    add_definitions(-D__USE_GNU -D_GNU_SOURCE)
    set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -D__USE_GNU -D_GNU_SOURCE)
elseif(MONO_OSX)
    add_definitions(-DPLATFORM_MACOSX)
elseif(MONO_ANDROID)
    add_definitions(-D__USE_GNU -D_GNU_SOURCE -DUSE_DL_PREFIX)
    set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -D__USE_GNU -D_GNU_SOURCE)
    if (MONO_ARM)
        add_definitions(-marm)
    endif()
endif()

if (MONO_TARGET_PLATFORM STREQUAL "OSX")
    set(TARGET_MACH on)
endif()

if (MONO_TARGET_ARCH STREQUAL "ARM")
    add_definitions(-DARM_FPU_VFP_HARD)
endif()

if (MONO_AMD64)
    add_definitions(-D__x86_64__)
elseif (MONO_X86)
    add_definitions(-D__i386__)
endif()

set(TARGET_${MONO_TARGET_ARCH} on)
set(TARGET_${MONO_TARGET_PLATFORM} on)
foreach(_arch ARM64 ARM AMD64 X86 POWERPC POWERPC64)
    if (MONO_${_arch})
        set(HOST_${_arch} on)
    endif()
endforeach()
if (NOT MONO_${MONO_TARGET_ARCH} OR NOT MONO_${MONO_TARGET_PLATFORM})
    set(MONO_CROSS_COMPILE on)
endif()

include(cmake/MonoCheck.cmake)
include(cmake/EGLibSetting.cmake)

add_subdirectory(mono)
add_subdirectory(eglib)
get_property(MONO_SRC GLOBAL PROPERTY MONO_mono_SRC)
get_property(MONO_MINI_SRC GLOBAL PROPERTY MONO_mini_SRC)
get_property(MONO_EGLIB_SRC GLOBAL PROPERTY MONO_eglib_SRC)
get_property(MONO_UTILS_SRC GLOBAL PROPERTY MONO_utils_SRC)
get_property(MONO_SGEN_SRC GLOBAL PROPERTY MONO_sgen_SRC)

get_property(MONO_X86_SRC GLOBAL PROPERTY MONO_mini-x86_SRC)
get_property(MONO_AMD64_SRC GLOBAL PROPERTY MONO_mini-amd64_SRC)
get_property(MONO_ARM_SRC GLOBAL PROPERTY MONO_mini-arm_SRC)
get_property(MONO_ARM64_SRC GLOBAL PROPERTY MONO_mini-arm64_SRC)
get_property(MONO_POWERPC_SRC GLOBAL PROPERTY MONO_mini-ppc_SRC)
get_property(MONO_POWERPC64_SRC GLOBAL PROPERTY MONO_mini-ppc64_SRC)

add_definitions(-DFD_SETSIZE=1024 -DGC_NOT_DLL -DHAVE_CONFIG_H -D__default_codegen__)

foreach(src ${MONO_SRC} ${MONO_SGEN_SRC})
	set_source_files_properties(${src} PROPERTIES COMPILE_DEFINITIONS 
		HAVE_SGEN_GC HAVE_MOVING_COLLECTOR HAVE_WRITE_BARRIERS)
endforeach()
foreach(src ${MONO_MINI_SRC} ${MONO_${MONO_TARGET_ARCH}_SRC})
	if (MONO_WIN32)
		set_source_files_properties(${src} PROPERTIES COMPILE_DEFINITIONS WIN32)
		if (MONO_AMD64)
			set_source_files_properties(${src} PROPERTIES COMPILE_DEFINITIONS WIN64)
		endif()
	endif()
endforeach()
add_library(libmono STATIC ${MONO_MINI_SRC} ${MONO_${MONO_TARGET_ARCH}_SRC}
	${MONO_SRC} ${MONO_SGEN_SRC} ${MONO_UTILS_SRC})
if (MONO_UNIX)
    target_compile_definitions(libmono PRIVATE -DMONO_BINDIR="." -DMONO_ASSEMBLIES="./lib"
         -DMONO_CFG_DIR="./etc" -DMONO_RELOC_LIBDIR="./lib")
endif()
add_library(eglib-mono STATIC ${MONO_EGLIB_SRC})

if (MONO_BUILD_DIRVER)
    add_executable(mono-sgen mono/mini/main-sgen.c)
    target_link_libraries(mono-sgen libmono eglib-mono)
    target_include_directories(mono-sgen PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/mono)
    add_dependencies(mono-sgen libmono eglib-mono)
    target_compile_definitions(mono-sgen PRIVATE -D_CONSOLE)
    if (MONO_WIN32)
        target_compile_definitions(mono-sgen PRIVATE -DWIN32)
        if (MONO_AMD64)
            target_compile_definitions(mono-sgen PRIVATE -DWIN64)
        endif()
        target_link_libraries(mono-sgen winmm ws2_32 version mswsock)
    elseif (MONO_UNIX)
        target_link_libraries(mono-sgen pthread m dl)
    elseif (MONO_OSX)
        target_link_libraries(mono-sgen "-framework CoreFoundation" "-framework Foundation" "-framework System")
    elseif (MONO_ANDROID)
        target_link_libraries(mono-sgen libm.a log libc.a)
    endif()
endif()

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/config.h.in.h ${CMAKE_CURRENT_BINARY_DIR}/config.h)
if (NOT MONO_WIN32)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/eglib/src/eglib-config.h.in ${CMAKE_CURRENT_BINARY_DIR}/eglib/src/eglib-config.h)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/eglib_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/eglib/config.h)
else()
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/eglib/winconfig.h ${CMAKE_CURRENT_BINARY_DIR}/eglib/config.h)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/eglib/src ${CMAKE_CURRENT_BINARY_DIR}/eglib/src)

target_include_directories(libmono PRIVATE ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/mono)
set_target_properties(libmono PROPERTIES PREFIX "")

target_include_directories(eglib-mono PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/eglib)
set_target_properties(eglib-mono PROPERTIES PREFIX "")

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/buildver-sgen.h "const char *build_date = \"\";")